---
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import type { CallToAction } from '~/types';

export interface Props {
  tagline?: string;
  title?: string;
  subtitle?: string;
  actions?: Array<CallToAction>;
  image?: {
    src: string | any;
    alt?: string;
  };
  compact?: boolean;
}

const {
  tagline,
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  compact = false,
} = Astro.props;

// Vérifier si l'image est un objet importé (comme avec import vpsImage from '...')
const isImportedImage = image?.src && typeof image.src === 'object';

// Déterminer si l'image est une URL externe
const isExternalImage = !isImportedImage && image?.src && typeof image.src === 'string' && (
  image.src.startsWith('http://') || 
  image.src.startsWith('https://')
);

// Pour les images locales, pas besoin de les importer manuellement
const isLocalImage = !isImportedImage && !isExternalImage && image?.src && typeof image.src === 'string';
---

<section class={`relative ${compact ? 'py-4 md:py-6' : 'py-6 md:py-8'}`}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="relative max-w-6xl mx-auto px-4 sm:px-6">
    <div class="pt-0 pointer-events-none"></div>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 items-center justify-items-center">
      <!-- Texte à gauche -->
      <div id="text-content" class="text-left w-full max-w-lg">
        {tagline && (
          <p
            class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase mb-1"
            set:html={tagline}
          />
        )}
        {title && (
          <h1
            class={`text-4xl md:text-5xl font-bold leading-tighter tracking-tighter ${compact ? 'mb-2 md:mb-3' : 'mb-3 md:mb-4'} font-heading`}
            set:html={title}
          />
        )}
        {subtitle && (
          <p
            class={`text-xl text-muted dark:text-slate-300 ${compact ? 'mb-3' : 'mb-4'}`}
            set:html={subtitle}
          />
        )}
        {
          actions && (
            <div class="mt-6 flex flex-wrap gap-3">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <a
                    class={`btn text-white bg-primary hover:bg-secondary dark:bg-blue-700 dark:hover:bg-blue-800 sm:mb-0 ${
                      action.variant === 'primary' ? 'btn-primary' : ''
                    } ${action.variant === 'secondary' ? 'btn-secondary' : ''}`}
                    href={action.href}
                    target={action.target}
                    rel={action.rel}
                  >
                    {action.icon && (
                      <Icon name={action.icon} class="w-5 h-5 mr-1 -ml-1.5" />
                    )}
                    {action.text}
                  </a>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }
      </div>
      
      <!-- Image à droite -->
      {
        image && (
          <div class="relative order-first md:order-last flex items-center justify-center w-full">
            <div class="flex items-center justify-center w-full max-w-md">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : isImportedImage ? (
              <Image
                src={image.src}
                alt={image.alt || ''}
                  class="mx-auto rounded-md"
                  style="max-width: 100%; height: auto; object-fit: contain; aspect-ratio: auto;"
                  loading="eager"
                  width={500}
                />
              ) : isExternalImage ? (
                <img
                  src={image.src}
                  alt={image.alt || ''}
                  class="mx-auto rounded-md"
                  style="max-width: 100%; height: auto; object-fit: contain; aspect-ratio: auto;"
                  loading="eager"
                />
              ) : isLocalImage ? (
                <img
                  src={image.src}
                  alt={image.alt || ''}
                  class="mx-auto rounded-md"
                  style="max-width: 100%; height: auto; object-fit: contain; aspect-ratio: auto;"
                  loading="eager"
                />
              ) : (
                <div class="bg-gray-200 rounded-md w-full flex items-center justify-center" style="height: 300px;">
                  <p class="text-gray-500">Image non disponible</p>
    </div>
              )}
    </div>
  </div>
        )
      }
    </div>
  </div>
</section>
