---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

interface Feature {
  title: string;
  description: string;
  image: {
    src: string;
    alt: string;
  };
}

interface Props {
  title: string;
  subtitle?: string;
  tagline?: string;
  features: Feature[];
  isDark?: boolean;
  bg?: any;
  id?: string;
  classes?: {
    container?: string;
  };
}

const {
  title,
  subtitle,
  tagline,
  features,
  isDark = false,
  bg = await Astro.slots.render('bg'),
  id,
  classes = {},
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="space-y-16">
    {features.map((feature, index) => (
      <div
        class={`flex flex-col ${index % 2 === 0 ? 'lg:flex-row' : 'lg:flex-row-reverse'} items-center gap-8 feature-panel`}
        data-aos={index % 2 === 0 ? 'fade-right' : 'fade-left'}
      >
        <!-- Screenshot/Image -->
        <div class="flex-shrink-0 w-full lg:w-1/2 flex justify-center items-center">
          <div class="rounded-lg overflow-hidden shadow-xl relative group max-w-md mx-auto">
            <a href={feature.image.src} target="_blank" rel="noopener noreferrer" class="block">
              <!-- Utiliser une balise img standard avec dimensions explicites -->
              <img
                src={feature.image.src}
                alt={feature.image.alt}
                width="400"
                height="400"
                class="w-full h-auto object-contain transition-transform duration-300 group-hover:scale-105"
                loading={index === 0 ? "eager" : "lazy"}
              />
            </a>
          </div>
        </div>

        <!-- Feature Description -->
        <div class="flex-grow w-full lg:w-1/2 text-center lg:text-left">
          <h3 class="text-2xl font-semibold text-white mb-4">{feature.title}</h3>
          <p class="text-slate-300 text-lg">{feature.description}</p>
        </div>
      </div>
    ))}
  </div>
</WidgetWrapper>

<!-- Inliner directement les styles critiques de AOS au lieu de les charger depuis un fichier externe -->
<style is:global>
  /* Styles critiques de AOS inlinés directement */
  [data-aos] {
    opacity: 0;
    transform: translateY(20px);
    transition-property: opacity, transform;
    transition-duration: 800ms;
    transition-timing-function: ease-in-out;
  }

  [data-aos].aos-animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Styles spécifiques pour les panneaux de fonctionnalités */
  .feature-panel {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.8s ease-in-out, transform 0.8s ease-in-out;
  }

  /* Styles de base pour les images dans les panneaux */
  .feature-panel img {
    transition: transform 0.3s ease;
  }

  .feature-panel .group:hover img {
    transform: scale(1.05);
  }
</style>

<script>
  // Charger AOS de manière différée sans bloquer le rendu
  document.addEventListener('DOMContentLoaded', () => {
    // Fonction pour initialiser AOS
    const initAOS = async () => {
      try {
        const AOS = (await import('aos')).default;
        // Pas besoin d'importer le CSS car nous avons inliné les styles critiques
        AOS.init({
          duration: 800,
          easing: 'ease-in-out',
          once: true,
          startEvent: 'DOMContentLoaded',
        });
      } catch (error) {
        console.error('Erreur lors du chargement de AOS:', error);
      }
    };

    // Utiliser requestIdleCallback pour charger AOS quand le navigateur est inactif
    if ('requestIdleCallback' in window) {
      window.requestIdleCallback(() => initAOS(), { timeout: 2000 });
    } else {
      // Fallback pour les navigateurs qui ne supportent pas requestIdleCallback
      setTimeout(initAOS, 1000);
    }
  });
</script>