---
import NewsCard from '~/components/news/NewsCard.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';

interface Props {
  articles: any[];
  sectionTitle: string;
  lang: string;
}

const { articles, sectionTitle, lang } = Astro.props;

// Textes pour l'accessibilité selon la langue
const prevText = lang === 'fr' ? 'Article précédent' : 'Previous article';
const nextText = lang === 'fr' ? 'Article suivant' : 'Next article';
---

<WidgetWrapper id="related-articles" isDark={true} containerClass="max-w-6xl mx-auto">
  <Headline title={sectionTitle} />

  <div class="relative intersect-once">
    <!-- Slider container -->
    <div class="overflow-hidden">
      <div id="articles-slider" class="flex transition-transform duration-500 ease-in-out">
        {
          articles.map((article) => {
            // Extraire le slug sans le préfixe de langue
            const cleanSlug = article.slug.includes('/') ? article.slug.split('/').pop() : article.slug;

            return (
              <div class="flex-shrink-0 w-full sm:w-1/2 lg:w-1/3 xl:w-1/4 px-4">
                <NewsCard
                  title={article.data.title}
                  description={article.data.description}
                  image={article.data.image}
                  imageAlt={article.data.imageAlt}
                  publishDate={article.data.publishDate}
                  category={article.data.category}
                  tags={article.data.tags}
                  slug={article.slug}
                  lang={lang}
                />
              </div>
            );
          })
        }
      </div>
    </div>

    <!-- Conteneur pour les boutons de navigation -->
    <div class="relative">
      <!-- Les boutons seront injectés ici par JavaScript -->
      <div id="navigation-buttons-container"></div>
    </div>
  </div>
</WidgetWrapper>

<script is:inline define:vars={{ prevText, nextText }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Fonction pour créer un bouton accessible
    function createAccessibleButton(id, text, direction) {
      const button = document.createElement('button');
      button.id = id;
      button.setAttribute('aria-label', text);
      button.setAttribute('type', 'button');
      button.className = `rounded-full p-2 text-white -translate-y-1/2 absolute hover:bg-slate-700 ${direction === 'prev' ? 'left-0' : 'right-0'} top-1/2`;
      
      // Créer l'icône SVG
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('class', 'h-6 w-6');
      svg.setAttribute('fill', 'none');
      svg.setAttribute('viewBox', '0 0 24 24');
      svg.setAttribute('stroke', 'currentColor');
      svg.setAttribute('aria-hidden', 'true');
      
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path.setAttribute('stroke-linecap', 'round');
      path.setAttribute('stroke-linejoin', 'round');
      path.setAttribute('stroke-width', '2');
      path.setAttribute('d', direction === 'prev' ? 'M15 19l-7-7 7-7' : 'M9 5l7 7-7 7');
      
      svg.appendChild(path);
      button.appendChild(svg);
      
      // Ajouter le texte accessible
      const span = document.createElement('span');
      span.className = 'sr-only';
      span.textContent = text;
      button.appendChild(span);
      
      return button;
    }
    
    // Récupérer le conteneur des boutons
    const container = document.getElementById('navigation-buttons-container');
    if (!container) return;
    
    // Créer et ajouter les boutons
    const prevBtn = createAccessibleButton('prev-btn', prevText, 'prev');
    const nextBtn = createAccessibleButton('next-btn', nextText, 'next');
    
    container.appendChild(prevBtn);
    container.appendChild(nextBtn);
    
    // Configurer le slider
    const slider = document.getElementById('articles-slider');
    if (!slider) return;
    
    let currentIndex = 0;
    const itemsPerView = window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : window.innerWidth < 1280 ? 3 : 4;
    const totalItems = slider.children.length;
    const maxIndex = Math.max(0, totalItems - itemsPerView);
    
    const updateSlider = () => {
      const translateX = -(currentIndex * (100 / itemsPerView));
      slider.style.transform = `translateX(${translateX}%)`;
      
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex === maxIndex;
      
      prevBtn.setAttribute('aria-disabled', currentIndex === 0 ? 'true' : 'false');
      nextBtn.setAttribute('aria-disabled', currentIndex === maxIndex ? 'true' : 'false');
    };
    
    prevBtn.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateSlider();
      }
    });
    
    nextBtn.addEventListener('click', () => {
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateSlider();
      }
    });
    
    updateSlider();
    
    window.addEventListener('resize', () => {
      const newItemsPerView = window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : window.innerWidth < 1280 ? 3 : 4;
      if (newItemsPerView !== itemsPerView) {
        currentIndex = 0;
        updateSlider();
      }
    });
  });
</script>

<style is:inline>
  /* Style pour les éléments visibles uniquement aux lecteurs d'écran */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>