---
import NewsCard from '~/components/news/NewsCard.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import NavigationButton from '~/components/ui/NavigationButton.astro';

interface Props {
  articles: any[];
  sectionTitle: string;
  lang: string;
}

const { articles, sectionTitle, lang } = Astro.props;
---

<WidgetWrapper id="related-articles" isDark={true} containerClass="max-w-6xl mx-auto">
  <Headline title={sectionTitle} />

  <div class="relative intersect-once">
    <!-- Slider container -->
    <div class="overflow-hidden">
      <div id="articles-slider" class="flex transition-transform duration-500 ease-in-out">
        {
          articles.map((article) => {
            // Extraire le slug sans le préfixe de langue
            const cleanSlug = article.slug.includes('/') ? article.slug.split('/').pop() : article.slug;

            return (
              <div class="flex-shrink-0 w-full sm:w-1/2 lg:w-1/3 xl:w-1/4 px-4">
                <NewsCard
                  title={article.data.title}
                  description={article.data.description}
                  image={article.data.image}
                  imageAlt={article.data.imageAlt}
                  publishDate={article.data.publishDate}
                  category={article.data.category}
                  tags={article.data.tags}
                  slug={article.slug}
                  lang={lang}
                />
              </div>
            );
          })
        }
      </div>
    </div>

    <!-- Navigation buttons avec composants dédiés -->
    <div class="relative">
      <NavigationButton direction="prev" id="prev-btn" lang={lang} />
      <NavigationButton direction="next" id="next-btn" lang={lang} />
    </div>
  </div>
</WidgetWrapper>

<script define:vars={{ lang }}>
  document.addEventListener('DOMContentLoaded', () => {
    const slider = document.getElementById('articles-slider');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');

    // Vérifier que les éléments existent
    if (!slider || !prevBtn || !nextBtn) return;

    // Assurer que les boutons ont des noms accessibles
    const prevText = lang === 'fr' ? 'Article précédent' : 'Previous article';
    const nextText = lang === 'fr' ? 'Article suivant' : 'Next article';
    
    // Fonction pour s'assurer que les boutons ont des attributs d'accessibilité
    const ensureAccessibility = (button, text) => {
      // Ajouter aria-label s'il n'existe pas
      if (!button.getAttribute('aria-label')) {
        button.setAttribute('aria-label', text);
      }
      
      // Vérifier si un span.sr-only existe déjà
      let srSpan = Array.from(button.children).find(child => 
        child.tagName === 'SPAN' && child.classList.contains('sr-only')
      );
      
      // Si non, créer et ajouter le span
      if (!srSpan) {
        srSpan = document.createElement('span');
        srSpan.className = 'sr-only';
        srSpan.textContent = text;
        button.appendChild(srSpan);
      }
    };
    
    // Appliquer l'accessibilité aux boutons
    ensureAccessibility(prevBtn, prevText);
    ensureAccessibility(nextBtn, nextText);

    let currentIndex = 0;
    const itemsPerView = window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : window.innerWidth < 1280 ? 3 : 4;
    const totalItems = slider.children.length;
    const maxIndex = Math.max(0, totalItems - itemsPerView);

    const updateSlider = () => {
      const translateX = -(currentIndex * (100 / itemsPerView));
      slider.style.transform = `translateX(${translateX}%)`;

      // Mettre à jour les attributs d'accessibilité en fonction de l'état
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex === maxIndex;
      
      // Mettre à jour les attributs aria pour refléter l'état des boutons
      prevBtn.setAttribute('aria-disabled', currentIndex === 0 ? 'true' : 'false');
      nextBtn.setAttribute('aria-disabled', currentIndex === maxIndex ? 'true' : 'false');
    };

    prevBtn.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateSlider();
      }
    });

    nextBtn.addEventListener('click', () => {
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateSlider();
      }
    });

    updateSlider();

    window.addEventListener('resize', () => {
      const newItemsPerView = window.innerWidth < 640 ? 1 : window.innerWidth < 1024 ? 2 : window.innerWidth < 1280 ? 3 : 4;
      if (newItemsPerView !== itemsPerView) {
        currentIndex = 0;
        updateSlider();
      }
    });
  });
</script>

<style>
  /* Style pour les éléments visibles uniquement aux lecteurs d'écran */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>