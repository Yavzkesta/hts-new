---
/**
 * Composant pour les boutons de navigation accessibles
 */

interface Props {
  direction: 'prev' | 'next';
  id: string;
  lang?: string;
}

const { direction, id, lang = 'fr' } = Astro.props;

// Textes pour l'accessibilité selon la langue et la direction
const getButtonText = () => {
  if (direction === 'prev') {
    return lang === 'fr' ? 'Article précédent' : 'Previous article';
  } else {
    return lang === 'fr' ? 'Article suivant' : 'Next article';
  }
};

const buttonText = getButtonText();
const position = direction === 'prev' ? 'left-0' : 'right-0';
---

<button 
  id={id}
  type="button"
  aria-label={buttonText}
  class={`rounded-full p-2 text-white -translate-y-1/2 absolute hover:bg-slate-700 ${position} top-1/2`}
>
  {direction === 'prev' ? (
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  ) : (
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  )}
  <span class="sr-only">{buttonText}</span>
</button>

<style>
  /* Style pour les éléments visibles uniquement aux lecteurs d'écran */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>