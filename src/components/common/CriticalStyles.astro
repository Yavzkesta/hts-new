---
// Composant pour gérer les styles critiques et optimiser le chargement des ressources CSS
---

<style is:inline>
  /* Styles critiques de base */
  body {
    margin: 0;
    padding: 0;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;
  }

  /* Styles critiques pour AOS (Animation On Scroll) */
  [data-aos] {
    opacity: 0;
    transform: translateY(20px);
    transition-property: opacity, transform;
    transition-duration: 800ms;
    transition-timing-function: ease-in-out;
  }

  [data-aos].aos-animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Styles critiques pour les layouts */
  .max-w-6xl {
    max-width: 72rem;
  }
  .mx-auto {
    margin-left: auto;
    margin-right: auto;
  }
  .flex {
    display: flex;
  }
  .flex-col {
    flex-direction: column;
  }
  .items-center {
    align-items: center;
  }
  .gap-8 {
    gap: 2rem;
  }
  .text-center {
    text-align: center;
  }
  .space-y-16 > * + * {
    margin-top: 4rem;
  }
  
  /* Styles spécifiques pour les panneaux de fonctionnalités */
  .feature-panel {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script is:inline>
  // Script pour optimiser le chargement des ressources CSS
  (function() {
    // Fonction pour détecter les feuilles de style qui bloquent le rendu
    function optimizeCSSLoading() {
      // Sélectionne tous les liens CSS
      const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
      
      stylesheets.forEach(stylesheet => {
        const href = stylesheet.getAttribute('href');
        
        // Si le lien contient GameFeaturePanel, on l'optimise
        if (href && href.includes('GameFeaturePanel')) {
          // On crée un nouvel élément link avec les attributs optimisés
          const optimizedLink = document.createElement('link');
          optimizedLink.rel = 'preload';
          optimizedLink.as = 'style';
          optimizedLink.href = href;
          optimizedLink.onload = function() {
            // Une fois préchargé, on change l'attribut rel pour appliquer les styles
            this.onload = null;
            this.rel = 'stylesheet';
          };
          
          // On insère le nouveau lien et on supprime l'ancien
          stylesheet.parentNode.insertBefore(optimizedLink, stylesheet);
          stylesheet.parentNode.removeChild(stylesheet);
        }
      });
    }
    
    // Exécuter immédiatement pour les ressources déjà présentes dans le DOM
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', optimizeCSSLoading);
    } else {
      optimizeCSSLoading();
    }
    
    // Observer les changements dans le DOM pour détecter les nouvelles feuilles de style
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (mutation.addedNodes && mutation.addedNodes.length) {
          for (let i = 0; i < mutation.addedNodes.length; i++) {
            const node = mutation.addedNodes[i];
            if (node.tagName === 'LINK' && node.rel === 'stylesheet' && node.href.includes('GameFeaturePanel')) {
              // Optimiser les nouvelles feuilles de style
              const href = node.href;
              const optimizedLink = document.createElement('link');
              optimizedLink.rel = 'preload';
              optimizedLink.as = 'style';
              optimizedLink.href = href;
              optimizedLink.onload = function() {
                this.onload = null;
                this.rel = 'stylesheet';
              };
              
              node.parentNode.insertBefore(optimizedLink, node);
              node.parentNode.removeChild(node);
            }
          }
        }
      });
    });
    
    // Observer le document entier pour les changements
    observer.observe(document.documentElement, {
      childList: true,
      subtree: true
    });
  })();
</script>