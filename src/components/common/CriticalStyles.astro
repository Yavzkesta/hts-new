---
// Composant pour gérer les styles critiques
---

<!-- Styles critiques inlinés pour Tailwind -->
<style is:inline>
  /* Styles critiques de base */
  body {
    margin: 0;
    padding: 0;
    font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  }

  /* Styles critiques pour AOS */
  [data-aos] {
    opacity: 1;
    transform: none;
    transition: opacity 0.3s, transform 0.3s;
  }

  /* Classes Tailwind critiques pour le layout initial */
  .container { width: 100%; padding-right: 1rem; padding-left: 1rem; margin-right: auto; margin-left: auto; }
  @media (min-width: 640px) { .container { max-width: 640px; } }
  @media (min-width: 768px) { .container { max-width: 768px; } }
  @media (min-width: 1024px) { .container { max-width: 1024px; } }
  @media (min-width: 1280px) { .container { max-width: 1280px; } }
  
  .flex { display: flex; }
  .flex-col { flex-direction: column; }
  .items-center { align-items: center; }
  .justify-center { justify-content: center; }
  .mx-auto { margin-left: auto; margin-right: auto; }
  .max-w-6xl { max-width: 72rem; }
  .gap-8 { gap: 2rem; }
  .text-center { text-align: center; }
  .py-4 { padding-top: 1rem; padding-bottom: 1rem; }
  .px-4 { padding-left: 1rem; padding-right: 1rem; }
  
  /* Classes pour le header et la navigation */
  header { position: sticky; top: 0; z-index: 30; }
</style>

<!-- Script pour charger les CSS de manière asynchrone -->
<script is:inline>
  // Fonction pour charger une feuille de style de manière asynchrone
  function loadCSSAsync(href) {
    // Éviter les doublons
    if (document.querySelector(`link[href="${href}"]`)) {
      return;
    }
    
    const link = document.createElement('link');
    link.rel = 'preload';
    link.as = 'style';
    link.href = href;
    link.onload = function() {
      this.onload = null;
      this.rel = 'stylesheet';
    };
    document.head.appendChild(link);
  }
  
  // Liste des fichiers CSS problématiques
  const nonCriticalCSS = [
    '/_astro/aos.DvB2Xm2x.css',
    '/_astro/terms.CwckJ63I.css'
  ];
  
  // Supprimer les liens CSS existants pour ces fichiers
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('link[rel="stylesheet"]').forEach(link => {
      const href = link.getAttribute('href');
      if (href && nonCriticalCSS.some(css => href.includes(css.split('/').pop().split('.')[0]))) {
        // Supprimer le lien existant
        link.parentNode.removeChild(link);
      }
    });
    
    // Charger les CSS de manière asynchrone après le chargement initial
    if (document.readyState === 'complete') {
      setTimeout(() => {
        nonCriticalCSS.forEach(href => loadCSSAsync(href));
      }, 100);
    } else {
      window.addEventListener('load', () => {
        setTimeout(() => {
          nonCriticalCSS.forEach(href => loadCSSAsync(href));
        }, 100);
      });
    }
  });
</script>