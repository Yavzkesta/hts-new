---
import { getCollection } from 'astro:content';
import PageLayout from '~/layouts/PageLayout.astro';
import Hero2 from '~/components/widgets/Hero2.astro';
import Features from '~/components/widgets/Features.astro';
import Pricing from '~/components/widgets/Pricing.astro';
import FAQs from '~/components/widgets/FAQs.astro';
import Testimonials from '~/components/widgets/Testimonials.astro';
import RelatedArticles from '~/components/widgets/RelatedArticles.astro';
import GameFeaturePanel from '~/components/widgets/GameFeaturePanel.astro';
import { getHeaderData } from '~/navigation';
import { getCloudinaryUrl, getImageFilename } from '~/utils/cloudinary';

export async function getStaticPaths() {
  const allGames = await getCollection('game');

  // Create mapping of base slugs to English content
  const slugToGameMap = new Map();

  allGames.forEach(game => {
    // If the content is in English
    if (game.data.language === 'en') {
      // Extract the base slug (without language suffix if present)
      const baseSlug = game.slug.replace(/-en$/, '');
      slugToGameMap.set(baseSlug, game);
    }
  });

  // Create static paths
  return Array.from(slugToGameMap.entries()).map(([baseSlug, game]) => ({
    params: { slug: baseSlug },
    props: { game },
  }));
}

const { game } = Astro.props;

// Get related articles for this game (by category)
const relatedArticles = await getCollection('news', ({ data, slug: articleSlug }) => {
  return (data.language === 'en' || articleSlug.startsWith('en/')) && 
         !data.draft && 
         data.category?.toLowerCase() === game.data.translationKey?.toLowerCase();
});

// Sort articles by publish date (newest to oldest)
function getPublishTimestamp(article) {
  const publishDate = article.data.publishDate;

  if (publishDate instanceof Date) {
    return publishDate.getTime();
  } else if (typeof publishDate === 'string') {
    return new Date(publishDate).getTime();
  } else {
    return 0;
  }
}

const sortedArticles = relatedArticles.sort(
  (a, b) => getPublishTimestamp(b) - getPublishTimestamp(a)
);

// Create JSON-LD
const jsonLd = {
  "@context": "https://schema.org",
  "@graph": [
    {
      "@type": "WebSite",
      "name": game.data.metadata?.title || "Default Title",
      "url": game.data.metadata?.url || "https://hebergtonserv.com",
      "description": game.data.metadata?.description || "Default Description",
      "publisher": {
        "@type": "Organization",
        "name": "HebergTonServ",
        "logo": {
          "@type": "ImageObject",
          "url": "https://hebergtonserv.com/logo.png"
        }
      }
    },
    ...(Array.isArray(game.data.pricing)
      ? game.data.pricing.map((plan) => ({
          "@type": "Product",
          "name": plan.title || "Default Product Name",
          "description": plan.subtitle || "Default Description",
          "image": game.data.hero?.image?.src || "https://hebergtonserv.com/default-image.png",
          "offers": {
            "@type": "Offer",
            "price": plan.price || "0.00",
            "priceCurrency": "EUR",
            "availability": "https://schema.org/InStock",
            "url": plan.callToAction?.href || "https://hebergtonserv.com"
          },
          "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": "4.7",
            "reviewCount": "150",
            "bestRating": "5",
            "worstRating": "1"
          }
        }))
      : []),
    {
      "@type": "FAQPage",
      "mainEntity": Array.isArray(game.data.faqs)
        ? game.data.faqs.map((faq) => ({
            "@type": "Question",
            "name": faq.title || "Default Question",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": faq.description || "Default Answer"
            }
          }))
        : []
    }
  ]
};

// Transform game faqs to FAQItem format
const faqItems = game.data.faqs?.map(faq => ({
  title: faq.title,
  description: faq.description,
  icon: faq.icon
})) || [];

// Get header data for the page
const headerData = getHeaderData('en');

// IMPORTANT: NE PAS MODIFIER LA STRUCTURE DES OBJETS D'IMAGE
// Le composant Hero2 s'attend à des objets d'image spécifiques
// Nous conservons la structure originale
const optimizedHero = game.data.hero;

// Pour les fonctionnalités, conserver la structure originale
const optimizedFeatures = game.data.features;

// Pour les témoignages, conserver la structure originale
const optimizedTestimonials = game.data.testimonials;

// Pour les fonctionnalités du panneau, conserver la structure originale
const optimizedPanelFeatures = game.data.panelFeatures;

// Fonction pour transformer les URL d'image en HTML pour les images externes
function createExternalImageHTML(url, alt = '') {
  if (!url) return '';
  
  // Si l'URL est déjà une URL externe, l'utiliser directement
  if (url.startsWith('http')) {
    return `<img src="${url}" alt="${alt}" class="mx-auto rounded-md w-full h-auto object-cover" loading="eager">`;
  }
  
  // Sinon, extraire le nom du fichier et créer une URL Cloudinary
  const filename = typeof url === 'string' ? url.split('/').pop() : null;
  if (filename) {
    const cloudinaryUrl = getCloudinaryUrl(filename, 'game-images', { 
      width: 1200, 
      height: 630, 
      quality: 90 
    });
    return `<img src="${cloudinaryUrl}" alt="${alt}" class="mx-auto rounded-md w-full h-auto object-cover" loading="eager">`;
  }
  
  return '';
}

// Préparer les images externes pour le héros si nécessaire
let heroImageHTML = '';
if (game.data.hero?.image?.src && typeof game.data.hero.image.src === 'string') {
  heroImageHTML = createExternalImageHTML(
    game.data.hero.image.src, 
    game.data.hero.image.alt || game.data.title || ''
  );
}
---

<PageLayout metadata={game.data.metadata}>
  <!-- JSON-LD Integration -->
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd).replace(/</g, '\u003c')}></script>

  <!-- Main Content with compact hero -->
  {heroImageHTML ? (
    <Hero2 
      title={optimizedHero.title}
      subtitle={optimizedHero.subtitle}
      tagline={optimizedHero.tagline}
      actions={optimizedHero.actions}
      compact={true}
    >
      <Fragment slot="image" set:html={heroImageHTML} />
    </Hero2>
  ) : (
    <Hero2 {...optimizedHero} compact={true} />
  )}
  
  <Features title="Main Features" items={optimizedFeatures} />
  <Pricing 
    title="Our Plans" 
    prices={game.data.pricing || []} 
  />

  <!-- Game Feature Panel Section -->
  {game.data.panelFeatures && (
    <GameFeaturePanel
      title={optimizedPanelFeatures.title}
      features={optimizedPanelFeatures.features}
    />
  )}

  <FAQs title="Frequently Asked Questions" items={faqItems} />
  <Testimonials title="Customer Reviews" testimonials={optimizedTestimonials} />

  <!-- Related Articles Section -->
  <RelatedArticles 
    articles={sortedArticles} 
    sectionTitle={`News about ${game.data.title}`} 
    lang="en" 
  />
</PageLayout>