---
import { getCollection } from 'astro:content';
import PageLayout from '~/layouts/PageLayout.astro';
import Hero2 from '~/components/widgets/Hero2.astro';
import Features from '~/components/widgets/Features.astro';
import Pricing from '~/components/widgets/Pricing.astro';
import FAQs from '~/components/widgets/FAQs.astro';
import Testimonials from '~/components/widgets/Testimonials.astro';
import RelatedArticles from '~/components/widgets/RelatedArticles.astro';
import GameFeaturePanel from '~/components/widgets/GameFeaturePanel.astro';
import { getHeaderData } from '~/navigation';
import { getCloudinaryUrl } from '~/utils/cloudinary';

export async function getStaticPaths() {
  const allGames = await getCollection('game');

  // Créer un mapping des slugs de base aux contenus en français
  const slugToGameMap = new Map();

  allGames.forEach(game => {
    // Si le contenu est en français
    if (game.data.language === 'fr') {
      // Extraire le slug de base (sans le suffixe de langue si présent)
      const baseSlug = game.slug.replace(/-fr$/, '');
      slugToGameMap.set(baseSlug, game);
    }
  });

  // Créer les chemins statiques
  return Array.from(slugToGameMap.entries()).map(([baseSlug, game]) => ({
    params: { slug: baseSlug },
    props: { game },
  }));
}

const { game } = Astro.props;

// Récupérer les articles liés à ce jeu (par catégorie)
const relatedArticles = await getCollection('news', ({ data, slug: articleSlug }) => {
  return (data.language === 'fr' || articleSlug.startsWith('fr/')) && 
         !data.draft && 
         data.category?.toLowerCase() === game.data.translationKey?.toLowerCase();
});

// Trier les articles par date de publication (du plus récent au plus ancien)
function getPublishTimestamp(article) {
  const publishDate = article.data.publishDate;

  if (publishDate instanceof Date) {
    return publishDate.getTime();
  } else if (typeof publishDate === 'string') {
    return new Date(publishDate).getTime();
  } else {
    return 0;
  }
}

const sortedArticles = relatedArticles.sort(
  (a, b) => getPublishTimestamp(b) - getPublishTimestamp(a)
);

// Optimiser l'image du héros avec Cloudinary
const heroImageName = game.data.hero?.image?.src ? game.data.hero.image.src.split('/').pop() : null;
const heroImage = heroImageName 
  ? getCloudinaryUrl(heroImageName, 'game-images', { width: 1200, height: 630, quality: 90 })
  : "https://hebergtonserv.com/default-image.png";

// Créer JSON-LD
const jsonLd = {
  "@context": "https://schema.org",
  "@graph": [
    {
      "@type": "WebSite",
      "name": game.data.metadata?.title || "Titre par défaut",
      "url": game.data.metadata?.url || "https://hebergtonserv.com",
      "description": game.data.metadata?.description || "Description par défaut",
      "publisher": {
        "@type": "Organization",
        "name": "HebergTonServ",
        "logo": {
          "@type": "ImageObject",
          "url": "https://hebergtonserv.com/logo.png"
        }
      }
    },
    ...(Array.isArray(game.data.pricing)
      ? game.data.pricing.map((plan) => ({
          "@type": "Product",
          "name": plan.title || "Nom du produit par défaut",
          "description": plan.subtitle || "Description par défaut",
          "image": heroImage,
          "offers": {
            "@type": "Offer",
            "price": plan.price || "0.00",
            "priceCurrency": "EUR",
            "availability": "https://schema.org/InStock",
            "url": plan.callToAction?.href || "https://hebergtonserv.com"
          },
          "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": "4.7",
            "reviewCount": "150",
            "bestRating": "5",
            "worstRating": "1"
          }
        }))
      : []),
    {
      "@type": "FAQPage",
      "mainEntity": Array.isArray(game.data.faqs)
        ? game.data.faqs.map((faq) => ({
            "@type": "Question",
            "name": faq.title || "Question par défaut",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": faq.description || "Réponse par défaut"
            }
          }))
        : []
    }
  ]
};

// Transformer les FAQs du jeu en format FAQItem
const faqItems = game.data.faqs?.map(faq => ({
  title: faq.title,
  description: faq.description,
  icon: faq.icon
})) || [];

// Obtenir les données d'en-tête pour la page
const headerData = getHeaderData('fr');

// Fonction pour optimiser les images avec Cloudinary
function optimizeImage(imagePath, options = {}) {
  if (!imagePath) return '';
  const imageName = imagePath.split('/').pop();
  return getCloudinaryUrl(imageName, 'game-images', options);
}

// Optimiser les images pour les composants
let optimizedHero = { ...game.data.hero };
if (optimizedHero.image?.src) {
  optimizedHero.image = {
    ...optimizedHero.image,
    src: optimizeImage(optimizedHero.image.src, { width: 1920, height: 1080, quality: 85 })
  };
}

// Optimiser les images des fonctionnalités
const optimizedFeatures = game.data.features?.map(feature => {
  if (feature.image) {
    return {
      ...feature,
      image: optimizeImage(feature.image, { width: 600, height: 400 })
    };
  }
  return feature;
}) || [];

// Optimiser les images des témoignages
const optimizedTestimonials = game.data.testimonials?.map(testimonial => {
  if (testimonial.image) {
    return {
      ...testimonial,
      image: optimizeImage(testimonial.image, { width: 100, height: 100, crop: 'fill' })
    };
  }
  return testimonial;
}) || [];
---

<PageLayout metadata={game.data.metadata}>
  <!-- Intégration JSON-LD -->
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd).replace(/</g, '\u003c')}></script>

  <!-- Contenu principal avec héros compact -->
  <Hero2 {...optimizedHero} compact={true} />
  <Features title="Caractéristiques principales" items={optimizedFeatures} />
  <Pricing 
    title="Nos offres" 
    prices={game.data.pricing || []} 
  />

  <!-- Section du panneau de fonctionnalités du jeu -->
  {game.data.panelFeatures && (
    <GameFeaturePanel
      title={game.data.panelFeatures.title}
      features={game.data.panelFeatures.features}
    />
  )}

  <FAQs title="Questions fréquentes" items={faqItems} />
  <Testimonials title="Avis clients" testimonials={optimizedTestimonials} />

  <!-- Section des articles liés -->
  <RelatedArticles 
    articles={sortedArticles} 
    sectionTitle={`Actualités sur ${game.data.title}`} 
    lang="fr" 
  />
</PageLayout>