---
import '~/assets/styles/tailwind.css';

import { ViewTransitions } from 'astro:transitions';
import CustomStyles from '~/components/CustomStyles.astro';
import Favicons from '~/components/Favicons.astro';
import Analytics from '~/components/common/Analytics.astro';
import CommonMeta from '~/components/common/CommonMeta.astro';
import Metadata from '~/components/common/Metadata.astro';
import SiteVerification from '~/components/common/SiteVerification.astro';
import ApplyColorMode from '~/components/common/ApplyColorMode.astro';
import BasicScripts from '~/components/common/BasicScripts.astro';
import CriticalStyles from '~/components/common/CriticalStyles.astro';

import type { MetaData } from '~/types';

export interface Props {
  metadata?: MetaData;
}

const { metadata = {} } = Astro.props;
---

<!DOCTYPE html>
<html lang="fr" class="2xl:text-[20px]">
  <head>
    <CommonMeta />
    <Metadata {...metadata} />
    <Favicons />
    
    <!-- Injecter les styles critiques en premier pour éviter le FOUC -->
    <CriticalStyles />
    
    <!-- Autres styles et scripts -->
    <CustomStyles />
    <SiteVerification />
    <Analytics />
    <ViewTransitions />
  </head>

  <body class="antialiased text-default bg-page tracking-tight">
    <ApplyColorMode />
    <slot />
    <BasicScripts />
    
    <!-- Script pour optimiser le chargement des ressources -->
    <script is:inline>
      // Fonction pour optimiser le chargement des ressources
      (function() {
        // Fonction pour charger les ressources de manière optimisée
        function loadOptimizedResources() {
          // Charger les ressources CSS de manière optimisée
          document.querySelectorAll('link[rel="stylesheet"]').forEach(link => {
            const href = link.getAttribute('href');
            
            // Si le lien contient GameFeaturePanel ou d'autres CSS non critiques
            if (href && (href.includes('GameFeaturePanel') || href.includes('terms'))) {
              // Créer un attribut media print pour ne pas bloquer le rendu
              link.setAttribute('media', 'print');
              link.setAttribute('onload', "this.media='all'");
              
              // Ajouter un attribut pour indiquer que ce lien a été optimisé
              link.setAttribute('data-optimized', 'true');
            }
          });
        }
        
        // Exécuter la fonction dès que possible
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', loadOptimizedResources);
        } else {
          loadOptimizedResources();
        }
        
        // Optimiser également les ressources ajoutées dynamiquement
        const observer = new MutationObserver(mutations => {
          mutations.forEach(mutation => {
            if (mutation.addedNodes && mutation.addedNodes.length) {
              for (let i = 0; i < mutation.addedNodes.length; i++) {
                const node = mutation.addedNodes[i];
                if (node.tagName === 'LINK' && node.rel === 'stylesheet' && 
                    (node.href.includes('GameFeaturePanel') || node.href.includes('terms')) && 
                    !node.hasAttribute('data-optimized')) {
                  node.setAttribute('media', 'print');
                  node.setAttribute('onload', "this.media='all'");
                  node.setAttribute('data-optimized', 'true');
                }
              }
            }
          });
        });
        
        // Observer le document pour les changements
        observer.observe(document.documentElement, {
          childList: true,
          subtree: true
        });
      })();
    </script>
  </body>
</html>